generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cinema {
  id        Int     @id @default(autoincrement())
  name      String?
  address   String?
  city      String?
  longitude Float?
  latitude  Float?
  media     String?
  halls     Hall[]
}

model Hall {
  id       Int     @id @default(autoincrement())
  name     String?
  cinema   Cinema? @relation(fields: [cinemaId], references: [id])
  cinemaId Int?
  media    String?
  events   Event[]
}

model Event {
  id        Int      @id @default(autoincrement())
  hall      Hall?    @relation(fields: [hallId], references: [id])
  hallId    Int?
  movie     Movie?   @relation(fields: [movieId], references: [id])
  movieId   Int?
  startTime DateTime
  endTime   DateTime
}

model Movie {
  id          Int                  @id @default(autoincrement())
  name        String?
  description String?
  rating      Float?
  duration    Int?
  media       String?
  tags        TagsOnMovies[]
  categories  CategoriesOnMovies[]
  event       Event[]
  CartItem    CartItem[]
  OrderItem   OrderItem[]
}

model Category {
  id     Int                  @id @default(autoincrement())
  name   String?
  movies CategoriesOnMovies[]
}

model CategoriesOnMovies {
  id         Int      @id @default(autoincrement())
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  movie      Movie    @relation(fields: [movieId], references: [id])
  movieId    Int
}

model TagsOnMovies {
  id      Int   @id @default(autoincrement())
  tag     Tag   @relation(fields: [tagId], references: [id])
  tagId   Int
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int
}

model Tag {
  id     Int            @id @default(autoincrement())
  name   String
  movies TagsOnMovies[]
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(USER)
  cart      Cart?
  orders    Order[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity  Int
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   Int
}

model Order {
  id        Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity  Int
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   Int
}

enum Role {
  USER
  ADMIN
}

model HeroSlide {
  id        Int      @id @default(autoincrement())
  title     String?
  subtitle  String?
  media     String?
  createdAt DateTime @default(now())
}
